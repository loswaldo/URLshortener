package postgres

import (
	"database/sql"
	"errors"
	"fmt"
	"github.com/go-yaml/yaml"
	_ "github.com/lib/pq"
	"io/ioutil"
	"log"
)

type Config struct {
	Host     string `yaml:"host"`
	Port     string `yaml:"port"`
	User     string `yaml:"user"`
	Password string `yaml:"password"`
	DBName   string `yaml:"db_name"`
	SSLMode  string `yaml:"ssl_mode"`
}

type PostgresDB struct {
	db *sql.DB
}

func NewPostgresDB(config *Config) (*PostgresDB, error) {
	db, err := sql.Open(
		"postgres",
		fmt.Sprintf(
			"host=%s port=%s user=%s dbname=%s password=%s sslmode=%s",
			config.Host, config.Port, config.User, config.DBName, config.Password, config.SSLMode))
	if err != nil {
		return nil, err
	}
	if err = db.Ping(); err != nil {
		return nil, err
	}
	if _, err = db.Exec(
		"CREATE TABLE IF NOT EXISTS shortUrls " +
			"(id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY , " +
			"short_url VARCHAR(255) NOT NULL UNIQUE, " +
			"long_url VARCHAR(255) NOT NULL UNIQUE);"); err != nil {
		return nil, err
	}

	return &PostgresDB{db: db}, nil

}
func (pDB *PostgresDB) GetLongURL(shortURL string) (string, error) {
	row := pDB.db.QueryRow("SELECT long_url FROM shortUrls WHERE short_url = $1", shortURL)
	var longURL string
	err := row.Scan(&longURL)
	if err == sql.ErrNoRows {
		return "", nil
	} else if err != nil {
		return "", err
	}
	return longURL, nil

}

func (pDB *PostgresDB) GetShortURL(longURL string) (string, error) {
	row := pDB.db.QueryRow("SELECT short_url FROM shortUrls WHERE long_url = $1", longURL)
	var shortURL string
	err := row.Scan(&shortURL)
	if err == sql.ErrNoRows {
		return "", nil
	}
	if err != nil {
		return "", err
	}
	return shortURL, nil
}

func (pDB *PostgresDB) AddNewURL(longURL, shortURL string) error {
	row := pDB.db.QueryRow("SELECT short_url FROM shortUrls WHERE long_url = $1 OR short_url = $2", longURL, shortURL)
	var shURL string
	err := row.Scan(&shURL)
	if err == sql.ErrNoRows {
		_, err = pDB.db.Query("INSERT INTO shortUrls (short_url, long_url) values ($1, $2)", shortURL, longURL)
		return err
	}
	if err != nil {
		return err
	}
	return errors.New("I have this URLS in db")
}

func CreateConfig() *Config {
	var config Config
	yamlFile, err := ioutil.ReadFile("./configs/postgre.yml")
	if err != nil {
		log.Fatal(err)
	}
	mapes := make(map[string]Config)
	err = yaml.Unmarshal(yamlFile, &mapes)
	config = mapes["db"]
	return &config
}
